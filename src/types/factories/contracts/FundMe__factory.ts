/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotEnoughFund",
    type: "error",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFunders",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620010e5380380620010e583398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051610f736200017260003960008181610398015261068a0152610f736000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101425780639e87a5cd1461016d578063b60d428814610198578063ea63a044146101a25761008e565b80630d8e6e2c146100985780633ccfd60b146100c357806354861af7146100da5780636b69a592146101175761008e565b3661008e5761008c6101cd565b005b6100966101cd565b005b3480156100a457600080fd5b506100ad6102fe565b6040516100ba91906108f3565b60405180910390f35b3480156100cf57600080fd5b506100d8610396565b005b3480156100e657600080fd5b5061010160048036038101906100fc919061093f565b61063a565b60405161010e91906109ad565b60405180910390f35b34801561012357600080fd5b5061012c610679565b60405161013991906108f3565b60405180910390f35b34801561014e57600080fd5b50610157610686565b60405161016491906109ad565b60405180910390f35b34801561017957600080fd5b506101826106ae565b60405161018f9190610a27565b60405180910390f35b6101a06101cd565b005b3480156101ae57600080fd5b506101b76106d8565b6040516101c49190610b00565b60405180910390f35b6802b5e3af16b188000061020c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461076690919063ffffffff16565b1015610244576040517f065f21f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102929190610b51565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190610b9a565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561049f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610455575b5050505050905060005b81518110156105295760008282815181106104c7576104c6610bc7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061052190610bf6565b9150506104a9565b50600067ffffffffffffffff81111561054557610544610c3e565b5b6040519080825280602002602001820160405280156105735781602001602082028036833780820191505090505b5060019080519060200190610589929190610833565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105b090610c9e565b60006040518083038185875af1925050503d80600081146105ed576040519150601f19603f3d011682016040523d82523d6000602084013e6105f2565b606091505b5050905080610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90610d10565b60405180910390fd5b5050565b6001818154811061064a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561075c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610712575b5050505050905090565b600080610772836107a2565b90506000670de0b6b3a7640000858361078b9190610d30565b6107959190610da1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108149190610e4a565b5050509150506402540be4008161082b9190610ec5565b915050919050565b8280548282559060005260206000209081019282156108ac579160200282015b828111156108ab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610853565b5b5090506108b991906108bd565b5090565b5b808211156108d65760008160009055506001016108be565b5090565b6000819050919050565b6108ed816108da565b82525050565b600060208201905061090860008301846108e4565b92915050565b600080fd5b61091c816108da565b811461092757600080fd5b50565b60008135905061093981610913565b92915050565b6000602082840312156109555761095461090e565b5b60006109638482850161092a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109978261096c565b9050919050565b6109a78161098c565b82525050565b60006020820190506109c2600083018461099e565b92915050565b6000819050919050565b60006109ed6109e86109e38461096c565b6109c8565b61096c565b9050919050565b60006109ff826109d2565b9050919050565b6000610a11826109f4565b9050919050565b610a2181610a06565b82525050565b6000602082019050610a3c6000830184610a18565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a778161098c565b82525050565b6000610a898383610a6e565b60208301905092915050565b6000602082019050919050565b6000610aad82610a42565b610ab78185610a4d565b9350610ac283610a5e565b8060005b83811015610af3578151610ada8882610a7d565b9750610ae583610a95565b925050600181019050610ac6565b5085935050505092915050565b60006020820190508181036000830152610b1a8184610aa2565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5c826108da565b9150610b67836108da565b9250828201905080821115610b7f57610b7e610b22565b5b92915050565b600081519050610b9481610913565b92915050565b600060208284031215610bb057610baf61090e565b5b6000610bbe84828501610b85565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c01826108da565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c3357610c32610b22565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c88600083610c6d565b9150610c9382610c78565b600082019050919050565b6000610ca982610c7b565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cfa600b83610cb3565b9150610d0582610cc4565b602082019050919050565b60006020820190508181036000830152610d2981610ced565b9050919050565b6000610d3b826108da565b9150610d46836108da565b9250828202610d54816108da565b91508282048414831517610d6b57610d6a610b22565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dac826108da565b9150610db7836108da565b925082610dc757610dc6610d72565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610df181610dd2565b8114610dfc57600080fd5b50565b600081519050610e0e81610de8565b92915050565b6000819050919050565b610e2781610e14565b8114610e3257600080fd5b50565b600081519050610e4481610e1e565b92915050565b600080600080600060a08688031215610e6657610e6561090e565b5b6000610e7488828901610dff565b9550506020610e8588828901610e35565b9450506040610e9688828901610b85565b9350506060610ea788828901610b85565b9250506080610eb888828901610dff565b9150509295509295909350565b6000610ed082610e14565b9150610edb83610e14565b9250828202610ee981610e14565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f2157610f20610b22565b5b8282058414831517610f3657610f35610b22565b5b509291505056fea2646970667358221220b3a0fe4c28f67f34531351387b26cbb1656fe30feb8f8b476235ecc788f1a10564736f6c63430008130033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    priceFeedAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  override deploy(
    priceFeedAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<
      FundMe & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FundMe__factory {
    return super.connect(runner) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FundMe {
    return new Contract(address, _abi, runner) as unknown as FundMe;
  }
}
